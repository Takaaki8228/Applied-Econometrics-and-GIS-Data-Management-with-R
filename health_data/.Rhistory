title = "OLS estimation",
dep.var.caption = "",
dep.var.labels = "Dependent Variable Name Here",
covariate.labels = label_regressors,
omit.stat = c("adj.rsq", "f", "ser"),
notes.append = FALSE,
# single.row = TRUE,
digits = 4,
notes = "",
notes.align = "c",
# align = T,
no.space = T,
add.lines = list(
c("Log of population", "", "Yes"),
c("Temperature", "", "Yes"),
c("Demographic characteristic", "Yes", "Yes"),
c("Household wealth", "Yes", "Yes")),
# table.layout ="-n",
# font.size = "scriptsize"
header = FALSE
)
# Define the row names
label_regressors <- c("Student Teacher Ratio", "English Score", "Parents Income")
stargazer(fit1, fit2,
se = starprep(fit1, fit2,
clusters = CASchools$county,
se_type = "stata"),
title = "OLS estimation",
dep.var.caption = "",
dep.var.labels = "Dependent Variable Name Here",
covariate.labels = label_regressors,
omit.stat = c("adj.rsq", "f", "ser"),
notes.append = FALSE,
# single.row = TRUE,
digits = 4,
notes = "",
notes.align = "c",
# align = T,
no.space = T,
add.lines = list(
c("Log of population", "", "Yes"),
c("Temperature", "", "Yes"),
c("Demographic characteristic", "Yes", "Yes"),
c("Household wealth", "Yes", "Yes")),
# table.layout ="-n",
# font.size = "scriptsize"
header = FALSE
)
# summary of basic data management: Stata to R (using dplyr)
# --------------------------------------------
# Note for this script
# Stata code that are the same operation are written in "###" columns
# --------------------------------------------
library(mlbench)
data(BostonHousing, package = "mlbench")
# https://www.rdocumentation.org/packages/mlbench/versions/2.1-1/topics/BostonHousing
library(tidyverse)
library(skimr)
house <- BostonHousing
# show the variable names
names(house)
# --------------------------------------------
# summary statistics
# --------------------------------------------
### Stata: table chas
# dplyr::count
house %>% count(chas)
house %>% count(rad)
### Stata: sum house
# skimr::skim
skim(house)
skim(house) %>% summary()
### Stata: sum house age distance ptratio
skim(house, age, dis, ptratio)
# dplyr::summarise
house %>%
summarise(age = mean(age),
ptratio = sd(ptratio),
observation = dplyr::n()
)
# dplyr::summarise_each
# most similar to "sum ptratio" in Stata
# but result presented in display look a bit different
house %>%
summarise_each(funs(n(), mean, sd, min, max),
ptratio)
# Stata: sum ptratio business tax
house %>%
summarise_each(funs(n(), mean, sd, min, max),
ptratio, indus, tax)
# Note: we can select statistics (i.e., mean, ed, etc...)
# dplyr::group_by
house %>%
group_by(rad) %>%
summarise_each(funs(n(), mean, sd, min, max),
ptratio)
# --------------------------------------------
# generate variables, drop, keep
# --------------------------------------------
# dplyr::rename
# new_varname = old_varname
### rename crim crime_rate
### rename zn resi_land
# and so on
house <- house %>%
rename(crime_rate = crim,
resi_land = zn,
business = indus,
river = chas,
ave_room = rm,
distance = dis,
access_road = rad,
race = b)
house.renamed <- house  # save as new name for the next practice
# dplyr::mutate
# Add new variables
# Besides selecting sets of existing columns, add new columns (variables) with dplyr::mutate
### Stata: gen high_access = 1 if access_road >= 6
###      : replace high_access = 0 if access_road < 6
house <- house %>%
mutate(high_access = ifelse(access_road >= 6,1,0))
### Stata: gen highest_access = 1 if access_road == 24
###      : replace highest_access = 0 if access_road != 24
house <- house %>%
mutate(highest_access = ifelse(access_road == 24,1,0))
### Stata: table high_access
house %>% count(high_access)
### Stata: gen crime100 = crime_rate * 100
###        gen teach_crime = crime100 / ptratio
house <- house %>%
mutate(crime100 = crime_rate * 100,
teach_crime = crime100 / ptratio)
# dplyr::select
### Stata: drop distance
house <- house %>%
select(-distance)
# "keep distance" in Stata is w/o minus sign, "select(distance)"
### Stata: keep crime_rate business river
house1 <- house %>%
select(crime_rate, business, river)
# summary of basic data management: Stata to R (using dplyr)
# --------------------------------------------
# Note for this script
# Stata code that are the same operation are written in "###" columns
# --------------------------------------------
library(mlbench)
data(BostonHousing, package = "mlbench")
# https://www.rdocumentation.org/packages/mlbench/versions/2.1-1/topics/BostonHousing
library(tidyverse)
library(skimr)
house <- BostonHousing
# show the variable names
names(house)
# --------------------------------------------
# summary statistics
# --------------------------------------------
### Stata: table chas
# dplyr::count
house %>% count(chas)
house %>% count(rad)
### Stata: sum house
# skimr::skim
skim(house)
skim(house) %>% summary()
### Stata: sum house age distance ptratio
skim(house, age, dis, ptratio)
# dplyr::summarise
house %>%
summarise(age = mean(age),
ptratio = sd(ptratio),
observation = dplyr::n()
)
# dplyr::summarise_each
# most similar to "sum ptratio" in Stata
# but result presented in display look a bit different
house %>%
summarise_each(funs(n(), mean, sd, min, max),
ptratio)
# Stata: sum ptratio business tax
house %>%
summarise_each(funs(n(), mean, sd, min, max),
ptratio, indus, tax)
# Note: we can select statistics (i.e., mean, ed, etc...)
# dplyr::group_by
house %>%
group_by(rad) %>%
summarise_each(funs(n(), mean, sd, min, max),
ptratio)
# --------------------------------------------
# generate variables, drop, keep
# --------------------------------------------
# dplyr::rename
# new_varname = old_varname
### rename crim crime_rate
### rename zn resi_land
# and so on
house <- house %>%
rename(crime_rate = crim,
resi_land = zn,
business = indus,
river = chas,
ave_room = rm,
distance = dis,
access_road = rad,
race = b)
house.renamed <- house  # save as new name for the next practice
# dplyr::mutate
# Add new variables
# Besides selecting sets of existing columns, add new columns (variables) with dplyr::mutate
### Stata: gen high_access = 1 if access_road >= 6
###      : replace high_access = 0 if access_road < 6
house <- house %>%
mutate(high_access = ifelse(access_road >= 6,1,0))
### Stata: gen highest_access = 1 if access_road == 24
###      : replace highest_access = 0 if access_road != 24
house <- house %>%
mutate(highest_access = ifelse(access_road == 24,1,0))
### Stata: table high_access
house %>% count(high_access)
### Stata: gen crime100 = crime_rate * 100
###        gen teach_crime = crime100 / ptratio
house <- house %>%
mutate(crime100 = crime_rate * 100,
teach_crime = crime100 / ptratio)
# dplyr::select
### Stata: drop distance
house <- house %>%
select(-distance)
# "keep distance" in Stata is w/o minus sign, "select(distance)"
### Stata: keep crime_rate business river
house1 <- house %>%
select(crime_rate, business, river)
library(mlbench)
data(BostonHousing, package = "mlbench")
library(tidyverse)
library(skimr)
house <- BostonHousing
# show the variable names
names(house)
### Stata: table chas
# dplyr::count
house %>% count(chas)
house %>% count(rad)
library(tidyverse)
library(tidyverse)
library(skimr)
house <- BostonHousing
# show the variable names
names(house)
### Stata: table chas
# dplyr::count
house %>% count(chas)
### Stata: table chas
# dplyr::count
house %>% dplyr::count(chas)
house %>% dplyr::count(rad)
### Stata: sum house
# skimr::skim
skim(house)
### Stata: sum house age distance ptratio
skim(house, age, dis, ptratio)
# dplyr::summarise
house %>%
summarise(age = mean(age),
ptratio = sd(ptratio),
observation = dplyr::n()
)
# dplyr::summarise
house %>%
dplyr::summarise(age = mean(age),
ptratio = sd(ptratio),
observation = dplyr::n()
)
# dplyr::summarise
house %>%
dplyr::summarise(age = mean(age),
ptratio = sd(ptratio),
observation = dplyr::n()
)
# dplyr::summarise_each
# most similar to "sum ptratio" in Stata
# but result presented in display look a bit different
house %>%
summarise_each(funs(n(), mean, sd, min, max),
ptratio)
# Stata: sum ptratio business tax
house %>%
summarise_each(funs(n(), mean, sd, min, max),
ptratio, indus, tax)
# dplyr::group_by
house %>%
group_by(rad) %>%
summarise_each(funs(n(), mean, sd, min, max),
ptratio)
# dplyr::rename
# new_varname = old_varname
### rename crim crime_rate
### rename zn resi_land
# and so on
house <- house %>%
rename(crime_rate = crim,
resi_land = zn,
business = indus,
river = chas,
ave_room = rm,
distance = dis,
access_road = rad,
race = b)
# dplyr::rename
# new_varname = old_varname
### rename crim crime_rate
### rename zn resi_land
# and so on
house <- house %>%
dplyr::rename(crime_rate = crim,
resi_land = zn,
business = indus,
river = chas,
ave_room = rm,
distance = dis,
access_road = rad,
race = b)
house.renamed <- house  # save as new name for the next practice
# dplyr::mutate
# Add new variables
# Besides selecting sets of existing columns, add new columns (variables) with dplyr::mutate
### Stata: gen high_access = 1 if access_road >= 6
###      : replace high_access = 0 if access_road < 6
house <- house %>%
mutate(high_access = ifelse(access_road >= 6,1,0))
### Stata: gen highest_access = 1 if access_road == 24
###      : replace highest_access = 0 if access_road != 24
house <- house %>%
mutate(highest_access = ifelse(access_road == 24,1,0))
### Stata: table high_access
house %>% count(high_access)
### Stata: table high_access
house %>% dplyr::count(high_access)
### Stata: gen crime100 = crime_rate * 100
###        gen teach_crime = crime100 / ptratio
house <- house %>%
mutate(crime100 = crime_rate * 100,
teach_crime = crime100 / ptratio)
# dplyr::select
### Stata: drop distance
house <- house %>%
select(-distance)
# dplyr::select
### Stata: drop distance
house <- house %>%
dplyr::select(-distance)
### Stata: keep crime_rate business river
house1 <- house %>%
select(crime_rate, business, river)
### Stata: keep crime_rate business river
house1 <- house %>%
dplyr::select(crime_rate, business, river)
# dplyr::filter
### Stata: keep access_road == 4
house2 <- house %>%
filter(access_road == 4)
View(house)
house2 <- house %>%
dplyr::filter(crime_rate > 0.2, crime_rate < 0.4)
View(house2)
die <- 1:6
roll <- function(n) {
mean(sample(die,size=n,replace=TRUE))
}
plot(sapply(1:200,roll),type="l",xlab="# of rolls",ylab="average",ylim=c(1,6))
abline(h=3.5,col="red")
##### 2. distribution of t-statistic #####
n <- 5000
data <- replicate(10000, {
x <- sample(c(0,1),n,replace=TRUE)
t.value <- (mean(x)-0.5)/(sd(x)/sqrt(length(x))) # compute t-statistic
})
## plot histogram
h <- hist(data,breaks=40,xlab="t-statistic",main="",xlim=c(-4,4),ylim=c(0,1500))
n
## plot std normal distribution
xfit <- seq(min(data),max(data),length=40)
yfit <- dnorm(xfit,mean=mean(data),sd=sd(data))
yfit <- yfit*diff(h$mids[1:2])*length(data)
lines(xfit,yfit,col="blue",lwd=1)
abline(v=c(-1.96,1.96), col="red")
library(wooldridge)
install.packages("wooldridge")
# install.packages("wooldridge")
library(wooldridge)
# clear all variables
rm(list=ls())
# import data
jt <- wooldridge::jtrain2
## balance table
res1 <- compareGroups(train ~ age + educ + black + hisp + married + re74 + re75 + re78 + unem74 + unem75 + unem78, data = jt)
# install.packages("wooldridge")
install.packages("compareGroups")
library(compareGroups)
# install.packages("wooldridge")
install.packages("compareGroups")
install.packages("compareGroups")
library(compareGroups)
## balance table
res1 <- compareGroups(train ~ age + educ + black + hisp + married + re74 + re75 + re78 + unem74 + unem75 + unem78, data = jt)
library(compareGroups)
library(compareGroups)
# install.packages("wooldridge")
install.packages("compareGroups")
library(compareGroups)
## regression
reg1 <- lm(re78 ~ train, data = jt)
summary(reg1)
reg2 <- lm(re78 ~ train + age + educ + black + hisp + married + re74 + re75, data = jt)
reg3 <- lm(re78 ~ train, data = jtrain3)
# difference in means
# re74: real earns., 1974, $1000s
re78_t <- with(jt, mean(re78[train == 1]))
re78_c <- with(jt, mean(re78[train == 0]))
diff_mean <- re78_t - re78_c
diff_mean
res <- t.test(re78 ~ train, data=jt, var.equal=TRUE)
res
t.test(re78 ~ train, data=jt, var.equal=TRUE)
reg1 <- lm(re78 ~ train, data = jt)
reg2 <- lm(re78 ~ train + age + educ + black + hisp + married + re74 + re75, data = jt)
stargazer(reg1, type="text")
library(stargazer)
# install.packages("wooldridge")
install.packages("stargazer")
install.packages("stargazer")
stargazer(reg1, type="text")
stargazer(reg2, type="text")
# import data
wage <- wooldridge::wagepan
diff_mean <- exper_hisp - exper_nonhisp
# difference in means
# exper: labor mkt experience
# hisp: =1 if Hispanic
exper_hisp <- with(wage, mean(exper[hisp == 1]))
exper_nonhisp <- with(wage, mean(exper[hisp == 0]))
diff_mean <- exper_hisp - exper_nonhisp
diff_mean
# t-statistic
t.test(exper ~ hisp, data=wage, var.equal=TRUE)
exper_hisp
reg1 <- lm(exper ~ hisp, data = wage)
stargazer(reg1, type="text")
# t-statistic
t.test(lwage ~ hisp, data=wage, var.equal=TRUE)
t.test(lwage ~ union, data=wage, var.equal=TRUE)
library(lfe)
# install.packages("wooldridge")
# install.packages("stargazer")
install.packages("lfe")
library(lfe)
library(lfe)
reg3 <- felm(lwage ~ union + expersq + married | nr + year, data=union)
reg2 <- lm(lwage ~ union + educ + black + hisp + exper + expersq + married, data = wage)
stargazer(reg2, type="text")
stargazer(reg1, type="text")
stargazer(reg2, type="text")
reg1 <- lm(lwage ~ union, data = wage)
reg2 <- lm(lwage ~ union + educ + black + hisp + exper + expersq + married, data = wage)
stargazer(reg1, type="text")
stargazer(reg2, type="text")
reg3 <- felm(lwage ~ union + expersq + married | nr + year, data = wage)
stargazer(reg3, type="text")
reg3 <- felm(lwage ~ lwage ~ union + educ + black + hisp + exper + expersq + married | nr + year, data = wage)
reg3 <- felm(lwage ~ union + educ + black + hisp + exper + expersq + married | nr + year, data = wage)
reg4 <- felm(lwage ~ union + educ + black + hisp + exper + expersq + married | nr + year, data = wage)
reg4 <- felm(lwage ~ union + educ + black + hisp + exper + expersq + married | nr + year, data = wage)
reg4 <- felm(lwage ~ union + educ + black + hisp + exper + expersq | nr + year, data = wage)
reg4 <- felm(lwage ~ union + educ + black + hisp + exper  + married | nr + year, data = wage)
reg4 <- felm(lwage ~ union + educ + black + hisp + expersq + married | nr + year, data = wage)
reg4 <- felm(lwage ~ union + educ + black + exper + expersq + married | nr + year, data = wage)
reg4 <- felm(lwage ~ union + educ + hisp + exper + expersq + married | nr + year, data = wage)
reg4 <- felm(lwage ~ union + educ + black + hisp + exper + expersq + married | nr + year, data = wage)
stargazer(reg1, reg2, reg3, type="text")
# import data
mdve <- mmdata::mdve
library(mmdata)
# install.packages("wooldridge")
# install.packages("stargazer")
# install.packages("lfe")
install.packages("mmdata")
library(mmdata)
# install.packages("wooldridge")
# install.packages("stargazer")
# install.packages("lfe")
install.packages("mmdata")
library(installr)
install.packages("library(installr)")
install.packages(installr)
install.packages("installr")
updateR()
install.packages("lfe")
library(lfe)
install.packages("mmdata")
library(dplyr)
# install.packages("wooldridge")
# install.packages("stargazer")
# install.packages("lfe")
install.packages("mmdata")
install.packages("rversions")
library("rversions")
r_release(dots = TRUE)
sessionInfo()
# install.packages("wooldridge")
# install.packages("stargazer")
# install.packages("lfe")
install.packages("mmdata")
