ggsave("precipitation.pdf", plot = g1, width = 7, height = 5)
g1 <- ggplot(bf.shape.csv.long,
aes(x = Month, y = value, group = region,
color = as.factor(region)))
g1 <- g1 + geom_line() +
geom_point(aes(shape=region), size = 2) +
# scale_shape_manual(values=c(2,3,8,14,15,18,23,42)) +
xlab("Month") +
ylab("Precipitation") +
labs(colour="region")
g1 <- g1 + theme_classic(base_size=14)
g1 <- g1 + theme(legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_text(size = 12),
legend.text  = element_text(size = 10),
legend.background = element_rect(
size=0.5, linetype = "solid", color ="black"),
axis.text=element_text(size=10),
axis.title=element_text(size=12),
# remove the vertical grid lines
panel.grid.major.x = element_blank() ,
# explicitly set the horizontal lines (or they will disappear too)
panel.grid.major.y = element_line(size=.1, color="black"))
g1 <- g1 + scale_x_discrete(limits=c("January", "February", "March", "April"))
plot(g1)
ggsave("precipitation.pdf", plot = g1, width = 7, height = 5)
# plot
g1 <- ggplot(bf.shape.csv.long,
aes(x = Month, y = value, group = region,
color = as.factor(region)))
g1 <- g1 + geom_line() +
geom_point(aes(shape=region), size = 2) +
# scale_shape_manual(values=c(2,3,8,14,15,18,23,42)) +
xlab("Month") +
ylab("Precipitation") +
labs(colour="region")
g1 <- g1 + theme_classic(base_size=14)
g1 <- g1 + theme(legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_text(size = 10),
legend.text  = element_text(size = 8),
legend.background = element_rect(
size=0.5, linetype = "solid", color ="black"),
axis.text=element_text(size=10),
axis.title=element_text(size=12),
# remove the vertical grid lines
panel.grid.major.x = element_blank() ,
# explicitly set the horizontal lines (or they will disappear too)
panel.grid.major.y = element_line(size=.1, color="black"))
g1 <- g1 + scale_x_discrete(limits=c("January", "February", "March", "April"))
plot(g1)
ggsave("precipitation.pdf", plot = g1, width = 7, height = 5)
bf.shape.csv <- read.csv("bf.shape.csv")
# same operation
bf.shape.csv <- bf.shape.csv %>%
dplyr::select(-GID_0, -NAME_0, -GID_1,
-NL_NAME_1:-GID_3,
-VARNAME_3:-HASC_3)
bf.shape.csv <- bf.shape.csv %>%
dplyr::rename(region = NAME_1,
village = NAME_3)
# check how it works
head(bf.shape.csv)
# check how many variables the bf.shape.csv has
ncol(bf.shape.csv)
# bf.shape.csv now has 9 columns
colnames(bf.shape.csv)
# 9th column is Apr07_mean
# for example, the 9th column has...
bf.shape.csv[, 9]
# create a new variable and locate in the 10th column
# sum up mean precipitation from January to April
bf.shape.csv[, 10] <-
bf.shape.csv[, "Jan07_mean"] + bf.shape.csv[, "Feb07_mean"] +
bf.shape.csv[, "Mar07_mean"] + bf.shape.csv[, "Apr07_mean"]
# check how it works
head(bf.shape.csv)
# change variable name
colnames(bf.shape.csv)[10] <- "sum_precipitation"
##############################################
# merge at the village level: the following is the Stata script
# merge 1:1 village
bf.merged <- merge(bf.shape, bf.shape.csv[, c("village", "sum_precipitation")], by = "village")
head(bf.merged)
##############################################
# now work on csv file
# same as collapse in stata
bf.shape.csv <- bf.shape.csv %>%
dplyr::group_by(region) %>%
dplyr::summarise(January = sum(Jan07_mean),
February = sum(Feb07_mean),
March = sum(Mar07_mean),
April = sum(Apr07_mean))
# change data format
bf.shape.csv.long <- bf.shape.csv %>%
tidyr::gather(2:5, key = Month, value = value)
# plot
g1 <- ggplot(bf.shape.csv.long,
aes(x = Month, y = value, group = region,
color = as.factor(region)))
g1 <- g1 + geom_line() +
geom_point(aes(shape=region), size = 2) +
# scale_shape_manual(values=c(2,3,8,14,15,18,23,42)) +
xlab("Month") +
ylab("Precipitation") +
labs(colour="region")
g1 <- g1 + theme_classic(base_size=14)
g1 <- g1 + theme(legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_text(size = 10),
legend.text  = element_text(size = 8),
legend.background = element_rect(
size=0.5, linetype = "solid", color ="black"),
axis.text=element_text(size=10),
axis.title=element_text(size=12),
# remove the vertical grid lines
panel.grid.major.x = element_blank() ,
# explicitly set the horizontal lines (or they will disappear too)
panel.grid.major.y = element_line(size=.1, color="black"))
g1 <- g1 + scale_x_discrete(limits=c("January", "February", "March", "April"))
plot(g1)
# see what data look like
head(CASchools)
# see what data look like
head(CASchools)
mean(CASchools$grades)
View(CASchools)
CASchools %>%
group_by(grades) %>%
summarise(average_read = mean(read),
average_math = mean(math))
CASchools %>%
group_by(grades) %>%
summarise(average_read = mean(read),
average_math = mean(math),
n = n())
CASchools %>%
group_by(grades) %>%
summarise(average_read = mean(read),
average_math = mean(math),
observation = n())
mean(CASchools$grades)
# show each test score by each grade
CASchools %>%
group_by(grades) %>%
summarise(average_read = mean(read),
average_math = mean(math),
average_score = mean(score),
observation = n())
# average test score
CASchools$score <- (CASchools$read + CASchools$math)/2
# show each test score by each grade
CASchools %>%
group_by(grades) %>%
summarise(average_read = mean(read),
average_math = mean(math),
average_score = mean(score),
observation = n())
summary(CASchools)
summary <- CASchools %>%
summary() %>%
arrange(mean) %>%
summary <- CASchools %>%
summary() %>%
arrange(mean)
summary <- CASchools %>%
summary() %>%
arrange(mean) %>%
select()
table(CASchools$score, CASchools$STR)
table(CASchools$score, CASchools$grades)
table(CASchools$STR, CASchools$grades)
cd(CASchools)
library(meda)
brotools::describe(CASchools)
library(brotools)
install.packages("brotools")
library(brotools)
devtools::install_github("b-rodrigues/brotools")
devtools::install_github("b-rodrigues/brotools")
devtools::install_github("jjchern/meda")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages(c("devtools", "usethis"))
install.packages(c("devtools", "usethis"))
library(devtools)
library(usethis)
library(devtools)
devtools::install_github("b-rodrigues/brotools")
library(brotools)
devtools::install_github("larmarange/labelled")
brotools::describe(CASchools)
library(meda)
devtools::install_github("larmarange/labelled")
devtools::install_github("jjchern/meda")
brotools::describe(CASchools)
devtools::install_github("b-rodrigues/brotools")
# install.packages("AER")
install.packages("skimr")
library(skimr)
skim(CASchools)
# summarize by default, corresponding to sum in Stata
# but hard to see in detail
summary(CASchools)
skim(CASchools)
cd(CASchools)
# see what data look like
head(CASchools)
skim(CASchools, income, read, math)
funs <- list(
iqr = IQR,
mad = mad
)
skim_with(numeric = funs, append = FALSE)
skim(CASchools)
skim_with(numeric = funs, append = FALSE)
skim(CASchools)
# summarize by default, corresponding to sum in Stata
# but hard to see in detail
summary(CASchools)
skim(CASchools) %>% summary()
table(CASchools$STR, CASchools$grades)
# --------------------------------------------
# there are several ways to show summary statistics
# summarize by default, corresponding to sum in Stata
# but hard to see in detail
summary(CASchools)
skim(CASchools)
skim(CASchools)
skim(CASchools, income, read, math)
# show each test score by each grade
CASchools %>%
group_by(grades) %>%
summarise(average_read = mean(read),
average_math = mean(math),
average_score = mean(score),
observation = n())
library(tidyverse)
# show each test score by each grade
CASchools %>%
group_by(grades) %>%
summarise(average_read = mean(read),
average_math = mean(math),
average_score = mean(score),
observation = n())
# show each test score by each grade
CASchools %>%
dplyr::group_by(grades) %>%
dplyr::summarise(average_read = mean(read),
average_math = mean(math),
average_score = mean(score),
observation = n())
# show each test score by each grade
CASchools %>%
dplyr::group_by(grades) %>%
dplyr::summarise(average_read = mean(read),
average_math = mean(math),
average_score = mean(score),
observation = dplyr::n())
# see what data look like
head(CASchools)
CASchools %>% dplyr::group_by(grades) %>% skim()
skim(CASchools) %>% skimr::kable()
skim(iris) %>% pander()
skim(CASchools) %>% pander()
panderOptions('knitr.auto.asis', FALSE)
print.data.frame(skim(CASchools))
dim(CASchools)
skim(CASchools)
skim(CASchools) %>% pander()
funs <- list(
mean = mean,
sd = sd,
min = min,
max = max,
)
skim_with(numeric = funs, append = FALSE)
# Restore defaults
skim_with_defaults()
funs <- list(
mean = mean,
sd = sd,
min = min,
max = max,
)
funs <- list(
mean = mean,
sd = sd,
min = min,
max = max
)
skim_with(numeric = funs, append = FALSE)
CASchools %>%
# filter(year==2007) %>%
# select(continent,lifeExp,gdpPercap)%>%
# group_by(continent) %>%
skim()
CASchools %>%
# filter(year==2007) %>%
# select(continent,lifeExp,gdpPercap)%>%
# group_by(continent) %>%
skim_with()
CASchools %>%
# filter(year==2007) %>%
# select(continent,lifeExp,gdpPercap)%>%
# group_by(continent) %>%
skim_with()
# --------------------------------------------
# there are several ways to show summary statistics
# summarize by default, corresponding to sum in Stata
# but hard to see in detail
summary(CASchools)
# see the dimension of the data
dim(CASchools)
# much better than summary()
skim(CASchools)
skim(CASchools) %>% summary()
skim(CASchools, income, read, math)
CASchools %>% dplyr::group_by(grades) %>% skim()
# show each test score by each grade
CASchools %>%
dplyr::group_by(grades) %>%
dplyr::summarise(average_read = mean(read),
average_math = mean(math),
average_score = mean(score),
observation = dplyr::n())
# much better than summary()
skim(CASchools)
# same as collapse in Stata
cas.county <- CASchools %>%
dplyr::group_by(county) %>%
dplyr::summarise(Math = mean(math))
View(cas.county)
g1 <- ggplot(cas.county, aes(x = county,
y = Math,
fill = county))
g1 <- g1 + geom_bar(stat = "identity") +
ylab("Percent of Forest Loss")
g1 <- g1 + theme_classic(base_size=16)
g1 <- g1 + theme(axis.title.x = element_blank(),
axis.title = element_text(size=16),
axis.text.x = element_text(angle = 30,
size = 14,
face = "bold"),
axis.text.y = element_text(size = 14),
plot.margin = unit(c(0, 0, -8, 0), "mm"),
# remove the vertical grid lines
panel.grid.major.x = element_blank() ,
# explicitly set the horizontal lines (or they will disappear too)
panel.grid.major.y = element_line(size=.1, color="black"),
legend.position = "none")
plot(g1)
g1 <- ggplot(cas.county, aes(x = county,
y = Math,
fill = county))
g1 <- g1 + geom_bar(stat = "identity") +
ylab("Average Math Score")
g1 <- g1 + theme_classic(base_size=16)
g1 <- g1 + theme(axis.title.x = element_blank(),
axis.title = element_text(size=16),
axis.text.x = element_text(angle = 40,
size = 10,
face = "bold"),
axis.text.y = element_text(size = 14),
plot.margin = unit(c(0, 0, -8, 0), "mm"),
# remove the vertical grid lines
panel.grid.major.x = element_blank() ,
# explicitly set the horizontal lines (or they will disappear too)
panel.grid.major.y = element_line(size=.1, color="black"),
legend.position = "none")
plot(g1)
ggsave("math_score.pdf", plot = g1, width = 7, height = 5)
setwd("~/documents/GitHub/gis-data/R_Econometrics")
g1 <- ggplot(cas.county, aes(x = county,
y = Math,
fill = county))
g1 <- g1 + geom_bar(stat = "identity") +
ylab("Average Math Score")
g1 <- g1 + theme_classic(base_size=16)
g1 <- g1 + theme(axis.title.x = element_blank(),
axis.title = element_text(size=16),
axis.text.x = element_text(angle = 40,
size = 10,
face = "bold"),
axis.text.y = element_text(size = 14),
plot.margin = unit(c(0, 0, -8, 0), "mm"),
# remove the vertical grid lines
panel.grid.major.x = element_blank() ,
# explicitly set the horizontal lines (or they will disappear too)
panel.grid.major.y = element_line(size=.1, color="black"),
legend.position = "none")
plot(g1)
ggsave("math_score.pdf", plot = g1, width = 10, height = 5)
g1 <- ggplot(cas.county, aes(x = county,
y = Math,
fill = county))
g1 <- g1 + geom_bar(stat = "identity") +
ylab("Average Math Score")
g1 <- g1 + theme_classic(base_size=13)
g1 <- g1 + theme(axis.title.x = element_blank(),
axis.title = element_text(size=16),
axis.text.x = element_text(angle = 40,
size = 8,
face = "bold"),
axis.text.y = element_text(size = 14),
plot.margin = unit(c(0, 0, -8, 0), "mm"),
# remove the vertical grid lines
panel.grid.major.x = element_blank() ,
# explicitly set the horizontal lines (or they will disappear too)
panel.grid.major.y = element_line(size=.1, color="black"),
legend.position = "none")
plot(g1)
ggsave("math_score.pdf", plot = g1, width = 10, height = 5)
ggsave("math_score.pdf", plot = g1, width = 10, height = 7)
install.packages(c("Rmisc", "stargazer"))
source('~/documents/GitHub/gis-data/R_Econometrics/.Rprofile')
fit <- lm(score ~ STR, data = CASchools)
# student teacher ratio
CASchools$STR <- CASchools$students / CASchools$teachers
# average test score
CASchools$score <- (CASchools$read + CASchools$math)/2
# average test score
CASchools$score <- (CASchools$read + CASchools$math)/2
```{r}
data(CASchools)
# student teacher ratio
CASchools$STR <- CASchools$students / CASchools$teachers
# average test score
CASchools$score <- (CASchools$read + CASchools$math)/2
fit <- lm(score ~ STR, data = CASchools)
summary(fit)
equatiomatic::extract_eq(fit)
install.packages("equatiomatic")
library(equatiomatic)
library(equatiomatic)
remotes::install_github("datalorax/equatiomatic")
equatiomatic::extract_eq(fit)
equatiomatic::extract_eq(fit, use_coefs = TRUE)
library("graphics")
K = seq(0,100,2.5)
L = seq(0,100,2.5)
Y = matrix(K^(1/3),41,1) %*% matrix(L^(2/3),1,41)
persp(x=K,y=L,z=Y,theta=300,phi=10,shade=0.5,col="skyblue")
print("welcome to this R demo. This program will produce a couple of windows, which you can arrange on your screen. Once a window is active (you click inside), you can grag the displayed object with the mouse and rotate it around.")
library(rgl)
install.packages("rgl")
library(rgl)
# setup data
nx <- 50	# points into x direction
ny <- 50	# points into y
x <- seq(0,1,length=50)
y <- seq(0,1,length=50)
df <- expand.grid(x=x,y=y)
# DGPs
cobb.douglas <- function(x,a,b) return( x[1]^a * x[2]^b )
# plotting data
cd1 <- apply(df,1,cobb.douglas,a=0.25,b=0.25)
cd2 <- apply(df,1,cobb.douglas,a=2,b=2)
# put in a matrix
cd.heights1 <- matrix(cd1,nrow=nx,ncol=ny)
cd.heights2 <- matrix(cd2,nrow=nx,ncol=ny)
# concave cobb douglas
open3d()
library(rgl)
sudo apt-get install libx11-dev
sudo apt-get install libglu1-mesa-dev
install.packages("rgl")
library(rgl)
library(rgl)
version
Sys.setenv(R_INSTALL_STAGED = FALSE)
library(rgl)
install.packages("rgl", type = "source", INSTALL_opts = "--force-biarch")
install.packages("rgl")
library(rgl)
install.packages("rgl", type = "source", INSTALL_opts = "--force-biarch")
# install.packages("rgl")
library(rgl)
# concave cobb douglas
open3d()
# concave cobb douglas
rgl.open() # Open a new RGL device
y <- x^3
y <- x
y^3
plot(y)
plot(y^3)
y <- 1:100
plot(y^3)
plot(y^2)
y^2
.0329907 +  -.0257534
0.0329907 +  -0.0257534
.0081578 + .0101545
0.0329907 + -0.0257534
24580 + 9510
24580 + 9510 + 55130
(0.03 * 16900) / (0.3 * 6000)
0.03 * 16900
0.3 * 6000
507/1800
0.3 * 1.03
